{"version":3,"file":"static/js/540.8acc305c.chunk.js","mappings":"oKAyBA,IAvBmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAOG,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjB,OACEA,IACE,yBACE,SAAC,EAAAC,KAAD,CACEC,GAAI,CAAEC,SAAS,WAAD,OAAaJ,IAC3BK,MAAO,CAAEC,KAAMT,GAFjB,SAIGI,KALID,EAUd,KAGN,C,+LCrBDO,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,mBAChBC,cACE,+NAIAC,EAAmB,mCAAG,6GAEDN,EAAAA,EAAAA,IACrB,kCACAC,GAJsB,cAElBM,EAFkB,yBAMjBA,EAASC,KAAKC,SANG,gCAQxBC,QAAQC,IAAR,MARwB,yDAAH,qDAYnBC,EAAiB,mCAAG,WAAMC,GAAN,gGAECb,EAAAA,EAAAA,IAAA,gBACZa,EADY,mBAErBZ,GAJoB,cAEhBM,EAFgB,yBAMfA,EAASC,MANM,gCAQtBE,QAAQC,IAAR,MARsB,yDAAH,sDAYjBG,EAAoB,mCAAG,WAAMC,GAAN,gGAEFf,EAAAA,EAAAA,IAAA,6BAAgCe,GAASd,GAFvC,cAEnBM,EAFmB,yBAIlBA,EAASC,KAAKC,SAJI,gCAMzBC,QAAQC,IAAR,MANyB,yDAAH,sDAUpBK,EAAY,mCAAG,WAAMH,GAAN,gGAEMb,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAsCZ,GAF5C,cAEXM,EAFW,yBAGVA,EAASC,KAAKS,MAHJ,gCAKjBP,QAAQQ,MAAR,MALiB,yDAAH,sDAQZC,EAAY,mCAAG,WAAMN,GAAN,gGAEMb,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAsCZ,GAF5C,cAEXM,EAFW,yBAGVA,EAASC,KAAKC,SAHJ,gCAKjBC,QAAQQ,MAAR,MALiB,yDAAH,qD,4HCrClB,EAnBe,SAAC,GAAkB,IAAhBE,EAAe,EAAfA,SACZC,EAAa,GASjB,OACE,+BACE,kBAAMC,OAAO,GAAGF,SATC,SAAAG,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,cACjBL,EAAaI,EAAKE,SAASZ,MAAMa,MACjCR,EAASC,GACTI,EAAKI,OACN,EAGG,WACE,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,aAAcX,KAC9C,mBAAQS,KAAK,SAAb,wBAIP,E,SCYD,EAvBe,WAAO,IAAD,EACnB,GAA4BG,EAAAA,EAAAA,UAAS,IAArC,eAAO5C,EAAP,KAAe6C,EAAf,KACA,GAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMtB,EAAK,UAAGqB,EAAaE,IAAI,gBAApB,QAAgC,GAW3C,OALAC,EAAAA,EAAAA,YAAU,WACHxB,IACLD,EAAAA,EAAAA,IAAqBC,GAAOyB,MAAK,SAAAC,GAAG,OAAIP,GAAU,OAAIO,GAAlB,GACrC,GAAE,CAAC1B,KAGF,iCACE,0RACA,SAAC,EAAD,CAAQK,SAZS,SAAAQ,GACnBS,EAAgB,CAAEtB,MAAOa,GAC1B,KAWG,SAACc,EAAA,EAAD,CAAYrD,OAAQA,MAGzB,C","sources":["components/MoviesList/MoviesList.jsx","helpers/api.js","components/Search/Search.jsx","pages/Movies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, title }) => {\n        return (\n          title && (\n            <li key={id}>\n              <Link\n                to={{ pathname: `/movies/${id}` }}\n                state={{ from: location }}\n              >\n                {title}\n              </Link>\n            </li>\n          )\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlMzkzMGZmOGVjN2Y3MDIzMzQ2OTRhMjgyMWM2M2Q4MyIsInN1YiI6IjY0YzQyNzJiZWMwYzU4MDBlODBiMjI4NCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.gnPmaXvRcXQrh2jdHCD7pTM-2igyCL7PyWdhAbgcU5A',\n  },\n};\n\nconst fetchFavoriteMovies = async () => {\n  try {\n    const response = await axios.get(\n      'trending/all/day?language=en-US',\n      options\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst fetchMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}?language=en-US`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst fetchSearchForMovies = async query => {\n  try {\n    const response = await axios.get(`search/movie?query=${query}`, options);\n\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst fetchCredits = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}/credits`, options);\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\nconst fetchReviews = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}/reviews`, options);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport {\n  fetchFavoriteMovies,\n  fetchMovieDetails,\n  fetchSearchForMovies,\n  fetchCredits,\n  fetchReviews,\n};\n","const Search = ({ onSubmit }) => {\n  let queryValue = '';\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    queryValue = form.elements.query.value;\n    onSubmit(queryValue);\n    form.reset();\n  };\n  return (\n    <>\n      <form action=\"\" onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" defaultValue={queryValue} />\n        <button type=\"submit\">Search</button>\n      </form>\n    </>\n  );\n};\nexport default Search;\n","import { useEffect, useState } from 'react';\nimport { fetchSearchForMovies } from 'helpers/api';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Search from 'components/Search/Search';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const handleSubmit = value => {\n    setSearchParams({ query: value });\n  };\n\n  useEffect(() => {\n    if (!query) return;\n    fetchSearchForMovies(query).then(res => setMovies([...res]));\n  }, [query]);\n\n  return (\n    <>\n      <h1>Страница поиска кинофильмов по ключевому слову.</h1>\n      <Search onSubmit={handleSubmit} />\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["movies","location","useLocation","map","id","title","Link","to","pathname","state","from","axios","options","method","headers","accept","Authorization","fetchFavoriteMovies","response","data","results","console","log","fetchMovieDetails","movieId","fetchSearchForMovies","query","fetchCredits","cast","error","fetchReviews","onSubmit","queryValue","action","evt","preventDefault","form","currentTarget","elements","value","reset","type","name","defaultValue","useState","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","then","res","MoviesList"],"sourceRoot":""}